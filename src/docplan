[{dia:"%data%",salas:[{sala:{%documento_sala%},timeslots:[{hora:"%hora_inicio%",duracao:"%duracao_slot%"}]}]}]

/*console.log(horario.filter( data => {
        if(data['Data da aula'] != undefined){
            const d = data['Data da aula'].split("/");
            const date = new Date(d[2], parseInt(d[1])-1, d[0]);
            return date>DataIni && date < DataFim;
        }
        return false;
    }).sort((a,b) => {
        if(a['Data da aula'] != undefined && b['Data da aula'] != undefined){
            const d = a['Data da aula'].split("/");
            const d1 = b['Data da aula'].split("/");
            const date = new Date(d[2], parseInt(d[1])-1, d[0]);
            const date1 = new Date(d1[2], parseInt(d1[1])-1, d1[0]);
            return date-date1;
        }
        return 0;
    }));*/

/*function findClassTimes(){
    console.log( horario.reduce( (acc, curr) => {
        if (!acc.includes(curr['Hora inÃ­cio da aula']+"-"+curr['Hora fim da aula']))
            acc.push(curr['Hora inÃ­cio da aula']+"-"+curr['Hora fim da aula']);
        return acc;
    }, []).sort((a,b) => {
        if(a != undefined && b != undefined){
            const t1 = a.split(":");
            const t2 = b.split(":");
            if(t1[0]!= t2[0]){
                return parseInt(t1[0])-parseInt(t2[0]);
            } else {
                return parseInt(t1[1])-parseInt(t2[1]);
            } 
        }
        return 0;
    }));
    console.log(horario.reduce( (acc, curr) => {
        if (!acc.includes(curr['Hora fim da aula']))
            acc.push(curr['Hora fim da aula']);
        return acc;
    }, []).sort((a,b) => {
        if(a != undefined && b != undefined){
            const t1 = a.split(":");
            const t2 = b.split(":");
            if(t1[0]!= t2[0]){
                return parseInt(t1[0])-parseInt(t2[0]);
            } else {
                return parseInt(t1[1])-parseInt(t2[1]);
            } 
        }
        return 0;
    }));
}*/